separateur<-function (chaine,n=2){
  taille<-nchar(chaine)
  ch<-c()
    if(taille%%n==0){
      #separer la chaine en n caractères
        for(i in seq(1,taille,n)){
            ch[i]<-substr(chaine,i,i+1)
        }
      #del les NA
      ch<-ch[!is.na(ch)]
    }
    else{
        ch<-NULL
    }
    return(ch)
}

#convert 16 to base 10
Convert16ToBase10<-function(val){
  alpha<-c("A","B","C","D","E","F")
    val<-toupper(val)
    if(val %in% alpha){
            val<-as.numeric(match(val,alpha))+9
        }
        else{
            val<-as.numeric(val)
        }
    return(val)
}

#convertir en base base
Convert<-function(addr, base){
  #seprarer la chaines tous les 2 caractères
  addr<-separateur(addr)
  #convertir en base base
  if (base==16){
    return(paste(addr,collapse="."))
  }
  else{
    #convertir en base 10
    for(i in 1:length(addr)){
      donne1<-substr(addr[i],1,1)
      donne2<-substr(addr[i],2,2)

      donne1<-Convert16ToBase10(donne1)
      donne2<-Convert16ToBase10(donne2)
      donne1<-donne1*16
      donne<-donne1+donne2

        addr[i]<-donne

    }

    return(paste(addr,collapse="."))
  }

}


## Capturer le flux d'entrée standard.
stream <- file("stdin","r")
## Lire le flux jusqu'à la fin dans un vecteur.
addr <- scan(file=stream, n = 1, what= character(), quiet=TRUE)
base <- scan(file=stream, n = 1, what= numeric(), quiet=TRUE)
## Ferme proprement le flux (pour éviter un warning).
close(stream)

## Traiter l'unique cas de test en entrée
cat(Convert(addr, base), '\n', sep = '')